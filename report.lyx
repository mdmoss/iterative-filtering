#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Exploring RobustAggregate Iterative Filtering
\end_layout

\begin_layout Author
Matthew Moss and Edward Pierzchalski
\end_layout

\begin_layout Standard
This report documents my exploration of the RobustAggregate iterative filtering
 technique presented by [Rezvani, Ignjatovic, Bertino, Jha 2013].
 Our aim is to identify any weaknesses in the original algorithm and attempt
 to rectify these.
 We've seen convincing demonstrations of the algorithm, so we're not expecting
 this to be a straightforward exercise.
\end_layout

\begin_layout Section*
Iterative Filtering Implementation
\end_layout

\begin_layout Standard
We started by implementing the core iterative filtering algorithm from [Kerchove
, Dooren 2010] to verify that is behaves as expected under both normal circumsta
nces, and when collusion attacks are present.
 We used the language python because its fairly familiar to us, and has
 several useful maths and statistics libraries.
\end_layout

\begin_layout Subsection*
Implementation Issues
\end_layout

\begin_layout Standard
During implementation, we also encountered the issues described in class
 because of the possible division by zero when using a reciprocal discriminant
 function.
 Unfortunately, no mention of how to circumvent this is made in the literature,
 and the execution trace given uses the reciprocal function.
 To verify our implementation against the literature values (to gain some
 measure of confidence it is correct) we had to improvise a change to the
 function.
\end_layout

\begin_layout Subsubsection*
Original reciprocal discriminant function
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
g(d)=d^{-k}
\]

\end_inset


\end_layout

\begin_layout Subsubsection*
Implementation
\end_layout

\begin_layout LyX-Code
def reciprocal(d):
\end_layout

\begin_deeper
\begin_layout LyX-Code
if d == 0:
\end_layout

\begin_deeper
\begin_layout LyX-Code
return sys.maxsize
\end_layout

\end_deeper
\begin_layout LyX-Code
return d**(-1)
\end_layout

\end_deeper
\begin_layout Standard
We also had some issues with convergence in our trial runs.
 Often the naive algorithm would never converge, due to (we suspect) minute
 floating point errors.
 We corrected these by rounding the reputation vector to four decimal places
 before checking for convergence.
\end_layout

\begin_layout Subsection*
Results
\end_layout

\begin_layout Standard
Using our implementation, we were able to replicate the trace given in Table
 2.1 of [RIBJ 2013].
 There were several small differences, most likely due to the differing
 implementation of the reciprocal function used, but the final result is
 as expected.
 Using an exponential function as the discriminant yielded similar results
 using the same input data.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Iterative Filter Implementation
\end_layout

\end_inset


\begin_inset Formula 
\[
g(d)=d^{-k}
\]

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
iterative filter
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
rounds until convergence
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
aggregate values
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $t=1$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $t=2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $t=3$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
literature reciprocal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19.42
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19.4102
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19.42
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reciprocal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19.42
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19.4102
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19.42
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
exponential
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19.3736
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19.4073
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19.3273
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Demonstration of Attacks
\end_layout

\begin_layout Standard
To confirm that the iterative filter we've implemented has the same behavior
 as the literature examples, we've used the same attack against it as in
 the paper.
 First, the simple collusion attack from Table 2.2.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Simple Attack
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
iterative filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
rounds until convergence
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
aggregate value (
\begin_inset Formula $t=1$
\end_inset

)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
literature reciprocal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19.4460
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reciprocal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19.4494
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
exponential
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19.8125
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are several possible explanations for the differences between the
 literature values and experimental results for the reciprocal filter.
 It's possible we have a difference in my implementation, thanks either
 to human error or a platform issue.
 It's also possible that using 
\begin_inset Formula $sys.maxsize$
\end_inset

 as the 
\begin_inset Formula $d=0$
\end_inset

 case in the reciprocal changes the result.
 As it does converge to a similar value, however, we think it's acceptable
 to use in further testing.
\end_layout

\begin_layout Standard
We also tried the sophisticated collusion attack, which had the following
 results.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sophisticated Collusion Attack
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
iterative filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
rounds until convergence
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
aggregate value (
\begin_inset Formula $t=1$
\end_inset

)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
literature reciprocal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18.4546
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reciprocal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18.4546
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
exponential
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19.8573
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We were interested by the final aggregate value for the exponential discriminant
 iterative filter, because it seemed to skew less than we'd expect, hearing
 about the weaknesses of the algorithm.
 We wrote a tester to explore attacks against the iterative filtering algorithm
 more thoroughly.
 To start, we measured the error of 1000 datasets similar to the intel example,
 with a single averaging colluder and a varying number of others skewing
 the data.
 The genuine readings were taken from a normal distribution around 0 with
 variance 1.
 The colluding sensors each reported a value with a bias of 
\begin_inset Formula $+4$
\end_inset

, except for a final colluder that reported the average of the other readings.
\end_layout

\begin_layout Standard
h
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename rms_by_number_of_colluding_sensors.svg
	width 100text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It seems the behavior from the Intel example is fairly typical, with the
 exponential discriminant function yielding a result that's quite close
 to accurate, even in the presence of colluders.
 This behavior deteriorates sharply when the number of colluders is half
 the number of sensors, as is intuitive.
\end_layout

\begin_layout Standard
To establish if the patterns for breakdown were typical, we repeated the
 experiment with 30 sensors and between 1 and 30 colluders.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename 30_sensors.svg
	width 100text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
From these results, it seems that 10 colluders out of 30 sensors is close
 to the limit where the algorithm begins to fail.
 We're going to use that ratio to explore how the other parameters affect
 the outome.
 First, we checked how the number of time samples used in the algorithm
 affects the accuracy of the result.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename vary_times.svg
	width 100text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The number of time samples used seems to have fairly little effect on the
 accuracy.
 We also varied the number of colluders reporting an average, to see the
 effect on the results.
 Keep in mind that every colluder reporting an average is one less to report
 a more extreme value, hence the trustworthiness of the averagers decreases
 overall.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename vary_averaging_colluders.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, we varied the value of the final colluding sensor, specifically
 to see if it had any effect on the exponential function's results.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename vary_avg.svg
	width 100text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
I'm interested by how robust using an exponential discriminant seems to
 be.
 The estimate seems to vary a lot less than the reciprocal.
 At this stage, it seemed that using the exponential function prevented
 the attacks demonstrated in the original paper.
 To find the point where it breaks down, we ran a test with 10 sensors including
 3 colluders, varying the bias of the colluder's measurements.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename vary_bias.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The error of the exponential estimator remains low until a certain bias
 is reached, at which point its performance degrades to match the reciprocal
 estimator.
 This bias is determined by a multiplier on the exponential function.
 This leads to the suggestion that, if the sensors were used in part of
 a real world system where a theoretical maximum reading can be established,
 and any readings above this point discarded, an exponential multiplier
 could be chosen in such a way that it behaves in the desired way for any
 possible readings.
 This is only an idea, and we have not investigated this avenue further.
\end_layout

\begin_layout Standard
To check the effects of using a larger multiplier with an exponentail discrimina
nt, we used the equation:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
g(d)=e^{-0.01d}
\]

\end_inset


\end_layout

\begin_layout Standard
Checking the result over a wide range of biases produces the following result.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename vary_bias_expo_big.svg
	width 100text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
From the results of our tests we've demonstrated the need for a more robust
 estimator, in situations where no inferences can be made ahead of time
 for the range of the input.
\end_layout

\begin_layout Section*
RobustAggregate Implementation
\end_layout

\begin_layout Subsection*
Bias and Variance Estimates
\end_layout

\begin_layout Standard
Originally, we used Scipy's numerical optimization libraries to directly
 find bias and variance estimates that minimize the target functions outlined
 in the original paper.
 Unfortunately, the robust versions often encountered division by zero under
 degenerate data, and so we opted to use the simpler versions.
 Due to performance reasons, we migrated to the method of solving for the
 estimate vector such that the gradient is the zero-vector: since this is
 a simple linear problem, we can use faster libraries to find a solution.
\end_layout

\begin_layout Standard
An iteresting point arises when we look at the derivation of the variance
 estimator.
 In equation (3.4) of the paper, we have that 
\begin_inset Formula $\hat{x}_{s}^{t}$
\end_inset

 is defined to be 
\begin_inset Formula $x_{s}^{t}-b_{s}$
\end_inset

, and so if 
\begin_inset Formula $x_{s}^{t}\sim N\left(r_{t}+b_{s},v_{s}\right)$
\end_inset

 then 
\begin_inset Formula $\hat{x}_{s}^{t}\sim N\left(r_{t},v_{s}\right)$
\end_inset

.
 However, on page 15 of the paper, it is stated that the readings 
\begin_inset Formula $\hat{x}_{s}^{t}$
\end_inset

 are unbiased, and thus that 
\begin_inset Formula $\mathbb{E}\left[\left(\hat{x}_{s}^{t}\right)^{2}\right]=v_{s}$
\end_inset

.
 However, this is clearly not true: 
\begin_inset Formula $\hat{x}_{s}^{t}$
\end_inset

 is `de-biased' with respect to
\emph on
 
\emph default
the sensor bias, not the true value, and so 
\begin_inset Formula $\mathbb{E}\left[\left(\hat{x}_{s}^{t}\right)^{2}\right]=v_{s}+r_{t}^{2}$
\end_inset

.
 Fortunately, this error is `cancelled out' when expanding 
\begin_inset Formula $\mathbb{E}\left[\hat{x}_{s}^{t}-\bar{x}^{t}\right]$
\end_inset

, and the final result is unchanged.
\end_layout

\begin_layout Standard
Since we apply the variance estimator in situations where the bias is unknown,
 we also note that this undercuts the assumption that leads to unbiasedness
 of the variance estimator.
 If the variance of 
\begin_inset Formula $b_{s}$
\end_inset

 is zero (i.e.
 it is an 
\emph on
a priori
\emph default
 known value), then indeed 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\hat{x}_{s}^{t}\sim N\left(r_{t},v_{s}\right)$
\end_inset

.
 However, if we have estimated 
\begin_inset Formula $b_{s}$
\end_inset

, then our estimate comes with some variance around the true value.
 For simplicity, let the true value of the bias be 
\begin_inset Formula $\beta_{s}$
\end_inset

, and let our estimate 
\begin_inset Formula $b_{s}\sim N\left(\beta_{s},\sigma_{\beta s}^{2}\right)$
\end_inset

.
 Then 
\begin_inset Formula $\hat{x}_{s}^{t}\sim N\left(r_{t},v_{s}+\sigma_{\beta s}^{2}\right)$
\end_inset

, and so our final estimate is for the sum of all variances, 
\family default
\series default
\shape default
\size default
\emph on
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
plus the variances of our bias estimator
\emph default
 and is itself biased.
 We confirm this with generated data in the figure below.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename variance_estimator_bias_figure.png
	width 100text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
MLE and Collusion Detection
\end_layout

\begin_layout Standard
Implementing MLE and collusion detection as described in the paper was fairly
 straightforward.
 We used a p-value of 0.5 or greater as the cut off for acceptance of the
 null hypothesis for collusion detection.
 Sensors were revoked by removing them from the dataset, and rerunning the
 bias and variance detection, as well as the MLE.
\end_layout

\begin_layout Subsection*
Collusion Detection
\end_layout

\begin_layout Standard
We were unable to reproduce the effectiveness of the collusion detection
 system described in the paper.
 
\end_layout

\begin_layout Section*
Testing and Comparison
\end_layout

\begin_layout Standard
As with many implementations, it was not straightforward to test our filter.
 Although we have the results from the literature, recreating them has proved
 difficult.
 Some of our results are less than satisfactory, suggesting there may be
 a source of error we haven't considered.
 Here's our performance using our changed reciprocal discriminant from above,
 running on a dataset without colluders.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename robust_agg_recip.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exponential Discriminant
\end_layout

\begin_layout Standard
One of our questions initially was why the equation wasn't tested with an
 exponential discriminant, which wasn't discussed in the paper.
 We ran the test using the exponential discriminant, and found that its
 behavior is slightly less accurate than a reciprocal discriminant, but
 still seems acceptable, even where iterative filtering with an exponential
 discriminant breaks down.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename robust_agg_expo.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Robustness
\end_layout

\begin_layout Standard
We ran our robust aggregate implementation using both reciprocal and exponential
 discriminants against the same data type as iterative filtering, with 30
 sensors including 10 colluders.
 When we used a large number of time samples (
\begin_inset Formula $t=400)$
\end_inset

, we saw encouraging results similar to those described in the paper.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename rms_many_times.svg
	width 100text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When we switched to a dataset similar to the original intel datasets, however,
 the error was greatly increased.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename robust_agg_few_times.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Attacks
\end_layout

\begin_layout Subsection*
Idea - KS Attack
\end_layout

\begin_layout Standard
Ed writing here.
 What is it? How does it work? Might it work?
\end_layout

\begin_layout Subsection*
Analysis
\end_layout

\begin_layout Standard
We tested the resilience of the algorithm running on a dataset of 20 sensors,
 with up to five colluders, under several attack scenarios.
 We replicated methods of the simple and sophisticated attacks from the
 earlier experiments, and added an attack using foreknowledge of the algorithm.
 The attack attempted to use iterative the MLE and iterative filtering process
 to estimate the outcome from the trustworthy sensors, and adjust the colluders
 so they would seem like non-colluders in the ks test.
 We had varying success with this method, as the variance and bias estimation
 seems effective at finding colluders early.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename attack_resilience_robust_agg.svg
	width 100text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We also ran another simulation, using inputs generated the same way, to
 measure the performance of just the MLE using the bias and variance estimators.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename attack_resilience_mle.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
